// <auto-generated />
using System;
using Blog.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Blog.DbMigrator.Migrations
{
    [DbContext(typeof(BlogDatabaseContext))]
    [Migration("20210526170309_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<string>("TagsId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("tags_id");

                    b.HasKey("ArticleId", "TagsId")
                        .HasName("pk_article_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_article_tag_tags_id");

                    b.ToTable("article_tag");
                });

            modelBuilder.Entity("Blog.Domain.Articles.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("code");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("sub_title");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.ToTable("articles");
                });

            modelBuilder.Entity("Blog.Domain.Articles.ArticleComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("root_id");

                    b.Property<int?>("TargetId")
                        .HasColumnType("integer")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetName")
                        .HasColumnType("text")
                        .HasColumnName("target_name");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("web_site");

                    b.HasKey("Id")
                        .HasName("pk_article_comments");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_article_comments_article_id");

                    b.ToTable("article_comments");
                });

            modelBuilder.Entity("Blog.Domain.Articles.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("Blog.Domain.Articles.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_article_tag_articles_article_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Domain.Articles.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .HasConstraintName("fk_article_tag_tags_tags_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Domain.Articles.ArticleComment", b =>
                {
                    b.HasOne("Blog.Domain.Articles.Article", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_article_comments_articles_article_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Domain.Articles.Article", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
